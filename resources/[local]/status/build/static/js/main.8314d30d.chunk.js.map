{"version":3,"sources":["ProgressCircle.js","App.js","reportWebVitals.js","index.js"],"names":["ProgressCircle","props","radius","stroke","progress","color","icon","visible","normalizedRadius","circumference","Math","PI","strokeDashoffset","style","position","flexDirection","justifyContent","alignItems","display","class","height","width","transform","strokeWidth","strokeOpacity","fill","r","cx","cy","strokeDasharray","zIndex","fontSize","fontFamily","App","useState","canShow","updateShow","name","circles","updateCircles","React","useEffect","window","addEventListener","event","undefined","data","show","update","state","map","item","j","className","status","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8314d30d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nfunction ProgressCircle(props) {\r\n  const { radius, stroke, progress, color, icon, visible } = props;\r\n\r\n  let normalizedRadius = radius - stroke * 2;\r\n  let circumference = normalizedRadius * 2 * Math.PI;\r\n\r\n  const strokeDashoffset = circumference - (progress / 100) * circumference;\r\n\r\n  return (\r\n    <div>\r\n      {visible && (\r\n        <div style={{}}>\r\n          <div\r\n            style={{\r\n              position: \"relative\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              display: \"flex\",\r\n            }}\r\n          >\r\n            <svg\r\n              class=\"progress-ring\"\r\n              height={radius * 2}\r\n              width={radius * 2}\r\n              style={{ transform: `rotate(-90deg)` }}\r\n            >\r\n              <circle\r\n                class=\"progress-ring__circle\"\r\n                stroke={color}\r\n                strokeWidth={8}\r\n                style={{ strokeOpacity: 0.35 }}\r\n                fill=\"transparent\"\r\n                r={normalizedRadius}\r\n                cx={radius}\r\n                cy={radius}\r\n                strokeDasharray={circumference + \" \" + circumference}\r\n                strokeDashoffset={\"0\"}\r\n              />\r\n              <svg class=\"progress-ring\" height={radius * 2} width={radius * 2}>\r\n                <circle\r\n                  class=\"progress-ring__circle\"\r\n                  style={{ zIndex: 10 }}\r\n                  stroke={color}\r\n                  strokeWidth={8}\r\n                  fill=\"transparent\"\r\n                  r={normalizedRadius}\r\n                  cx={radius}\r\n                  cy={radius}\r\n                  strokeDasharray={circumference + \" \" + circumference}\r\n                  strokeDashoffset={strokeDashoffset}\r\n                />\r\n              </svg>\r\n            </svg>\r\n            <div\r\n              style={{\r\n                position: \"absolute\",\r\n                color: \"white\",\r\n                fontSize: \"18px\",\r\n                fontFamily: \"Verdana, Arial, Tahoma, Serif\",\r\n\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <i class={`fas fa-${icon}`}></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProgressCircle;\r\n","import './App.css';\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport ProgressCircle from './ProgressCircle.js';\n\nimport 'fontsource-roboto/400.css';\n\nfunction App() {\n  const [canShow, updateShow] = useState(false)\n  const [circles, updateCircles] = useState([\n      {\n        name: \"voice\",\n\n        color: 'white', // ACTIVE: #fff154\n        progress: 100,\n\n        icon: 'microphone',\n        visible: true,\n      },\n      {\n        name: \"health\",\n\n        color: '#59c795',\n        progress: 0,\n\n        icon: 'heart',\n        visible: true,\n      },\n      {\n        name: \"armor\",\n\n        color: '#2365b6',\n        progress: 0,\n\n        icon: 'shield-alt',\n        visible: false,\n      },\n      {\n        name: \"hunger\",\n\n        color: '#ed8126',\n        progress: 0,\n\n        icon: 'hamburger',\n        visible: true,\n      },\n      {\n        name: \"thirst\",\n\n        color: '#0576b9',\n        progress: 0,\n\n        icon: 'tint',\n        visible: true,\n      }\n\n    ]\n  )\n\n  React.useEffect(() => {\n    window.addEventListener(\"message\", ((event) => {\n      if (event.data.show != undefined) {\n        updateShow(event.data.show)\n      }\n      if (event.data.update != undefined) {\n        updateCircles(state => {\n          const list = state.map((item, j) => {\n            if (item.name == event.data.name) {\n              return {\n                ...item, \n                progress: event.data.progress != undefined ? event.data.progress : item.progress,\n                color: event.data.color != undefined ? event.data.color : item.color,\n                visible: event.data.visible != undefined ? event.data.visible : item.visible,\n              };\n            } else {\n              return item;\n            }\n          });\n      \n          return list;\n        })\n\n      }\n    }))\n  }, [])\n\n  return (\n    <div className=\"App\" style={{display: canShow ? 'block' : 'none'}}>\n      <div className=\"Main\">\n        {circles.map((status) => {\n          return (\n            <ProgressCircle\n              {...status}\n              stroke={4}\n              radius={30}\n            />\n          )\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}