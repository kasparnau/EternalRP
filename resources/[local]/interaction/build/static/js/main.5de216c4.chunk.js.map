{"version":3,"sources":["Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Main","props","className","style","backgroundColor","color","text","App","useState","canShow","updateShow","setText","setColor","React","useEffect","window","addEventListener","event","data","show","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAEe,SAASA,EAAKC,GACzB,OACI,qBAAKC,UAAU,OAAOC,MAAO,CAACC,gBAAiBH,EAAMI,OAArD,SACI,qBAAKH,UAAU,SAAf,SACKD,EAAMK,SC6BRC,MA/Bf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAS,MAFpB,mBAENF,EAFM,KAEAK,EAFA,OAGaH,mBAAS,WAHtB,mBAGNH,EAHM,KAGCO,EAHD,KAmBb,OAdAC,IAAMC,WAAU,WACdC,OAAOC,iBAAiB,WAAY,SAACC,GACX,MAApBA,EAAMC,KAAKb,OACbO,EAASK,EAAMC,KAAKb,OAEC,MAAnBY,EAAMC,KAAKZ,MACbK,EAAQM,EAAMC,KAAKZ,MAEE,MAAnBW,EAAMC,KAAKC,MACbT,EAAWO,EAAMC,KAAKC,WAGzB,IAGD,qBAAKjB,UAAU,MAAf,SACGO,GACC,cAACT,EAAD,CACEM,KAAMA,EACND,MAAOA,OChBFe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.5de216c4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Main(props){\r\n    return (\r\n        <div className=\"Main\" style={{backgroundColor: props.color}}>\r\n            <div className=\"Middle\">\r\n                {props.text}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport Main from './Main.jsx'\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [canShow, updateShow] = useState(false)\n  const [text, setText] = useState('hi')\n  const [color, setColor] = useState(\"#1b70b6\")\n  \n  React.useEffect(() => {\n    window.addEventListener(\"message\", ((event) => {\n      if (event.data.color != null) {\n        setColor(event.data.color)\n      }\n      if (event.data.text != null) {\n        setText(event.data.text)\n      }\n      if (event.data.show != null) {\n        updateShow(event.data.show)\n      }\n    }))\n  }, [])\n\n  return (\n    <div className=\"App\">\n      {canShow && (\n        <Main\n          text={text}\n          color={color}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}