{"version":3,"sources":["Circle.jsx","sendNUI.js","App.js","reportWebVitals.js","index.js"],"names":["Circle","props","circumference","Math","PI","offset","circleP","style","paddingTop","display","flexDirection","justifyContent","alignItems","position","class","width","height","stroke","stroke-width","fill","r","cx","cy","strokeDasharray","strokeDashoffset","transform","circleT","zIndex","color","progressColor","fontSize","fontFamily","actionKey","sendNUI","action","data","cb","fetch","method","headers","body","JSON","stringify","then","resp","json","interval","App","useState","percentage","setPercentage","key","setKey","target","setTarget","canShow","updateShow","React","useEffect","window","addEventListener","event","type","newKey","max","floor","random","speed","currSpeed","setInterval","value","clearInterval","success","start","currKey","perc","targ","min","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af1d1a9c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst lerp = (x, y, a) => x * (1 - a) + y * a;\r\n\r\nfunction Circle(props) {\r\n    const circumference = 52 * 2 * Math.PI\r\n    const offset = circumference - props.circleP / 100 * circumference;\r\n    \r\n    return(\r\n        <div>\r\n            <div style={{\r\n                paddingTop: '8px',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                }}>\r\n                <div style={{\r\n                    position: 'relative',\r\n                    flexDirection: 'column',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    display: 'flex',\r\n                }}>\r\n                    <svg\r\n                    class=\"progress-ring\"\r\n                    width=\"120\"\r\n                    height=\"120\">\r\n                    <circle\r\n                        class=\"progress-ring__circle\"\r\n                        stroke=\"#28313a\"\r\n                        stroke-width=\"12\"\r\n                        fill=\"transparent\"\r\n                        r=\"52\"\r\n                        cx=\"60\"\r\n                        cy=\"60\"\r\n                        strokeDasharray={`1, 0`}\r\n                        strokeDashoffset=\"0\"\r\n                    />\r\n                        <svg\r\n                        class=\"progress-ring\"\r\n                        width=\"120\"\r\n                        height=\"120\">\r\n                        <circle\r\n                            class=\"progress-ring__circle\"\r\n                            style={{transform: `rotate(${props.circleT-90}deg)`, zIndex: 9}}\r\n                            stroke=\"#09aa89\"\r\n                            stroke-width=\"12\"\r\n                            fill=\"transparent\"\r\n                            r=\"52\"\r\n                            cx=\"60\"\r\n                            cy=\"60\"\r\n                            strokeDasharray={`45, 360`}\r\n                            strokeDashoffset={'0'}\r\n                        />\r\n                        </svg>\r\n                        <svg\r\n                        class=\"progress-ring\"\r\n                        width=\"120\"\r\n                        height=\"120\">\r\n                        <circle\r\n                            class=\"progress-ring__circle\"\r\n                            style={{zIndex: 10}}\r\n                            stroke=\"white\"\r\n                            stroke-width=\"12\"\r\n                            fill=\"transparent\"\r\n                            r=\"52\"\r\n                            cx=\"60\"\r\n                            cy=\"60\"\r\n                            strokeDasharray={`${circumference}, ${circumference}`}\r\n                            strokeDashoffset={offset}\r\n                        />\r\n                        </svg>\r\n                </svg>\r\n                    <div style={{\r\n                        position: 'absolute',\r\n                        color: `${props.progressColor}`,\r\n                        fontSize: '3vw',\r\n                        fontFamily: 'Verdana, Arial, Tahoma, Serif',\r\n                    }}\r\n                    >\r\n                        {props.actionKey}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Circle;","import React from 'react';\r\n\r\nfunction sendNUI(action, data, cb) {\r\n    fetch(`https://skill-checks/nuiAction`, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json; charset=UTF-8',\r\n        },\r\n        body: JSON.stringify({\r\n            action,\r\n            data\r\n        })\r\n    }).then(resp => resp.json()).then((resp) => {\r\n        cb(resp)\r\n    });\r\n}\r\n\r\nexport default sendNUI","import './App.css';\r\nimport React, { useState } from 'react';\r\nimport Circle from './Circle.jsx';\r\nimport sendNUI from './sendNUI.js';\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * max) + 1  \r\n}\r\n\r\nvar interval = null\r\n\r\nfunction App() {\r\n  const [percentage, setPercentage] = useState(0)\r\n  const [key, setKey] = useState(1)\r\n  const [target, setTarget] = useState(90)\r\n  const [color, setColor] = useState(\"white\")\r\n  const [canShow, updateShow] = useState(false)\r\n\r\n  function start(speed, target){\r\n    const currSpeed = speed\r\n\r\n    setTarget(target)\r\n\r\n    interval = setInterval(function () {\r\n      setPercentage((value) => {\r\n        if (value < 100) { \r\n          return value + currSpeed\r\n        } else {\r\n          clearInterval(interval)\r\n          sendNUI(\"completed\", {success: false}, () => {})\r\n        }\r\n      })\r\n\r\n    }, 0.1);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    window.addEventListener(\"message\", ((event) => {\r\n      if (event.data.type == \"show\") {\r\n        updateShow(true)\r\n      } else if (event.data.type == \"hide\") {\r\n        updateShow(false)\r\n      } else if (event.data.type == \"start\") {\r\n        setPercentage(0)\r\n        const newKey = getRandomInt(4)\r\n        setKey(newKey)\r\n        start(event.data.speed, event.data.target)\r\n      }\r\n    }))\r\n\r\n    window.addEventListener(\"keydown\", ((event) => {\r\n        var currKey = null;\r\n        setKey((value) => {\r\n          currKey = value\r\n          return value\r\n        })\r\n        var success = null;\r\n        if (event.key == 1 || event.key == 2 || event.key == 3 || event.key == 4) {\r\n          clearInterval(interval)\r\n          if (event.key == currKey) {\r\n            var perc = 0\r\n            var targ = 0\r\n\r\n            setPercentage((value) => {\r\n              perc = value \r\n              return value\r\n            })\r\n            setTarget((value) => {\r\n              targ = value \r\n              return value\r\n            })\r\n\r\n            const min = targ/360*100\r\n            const max = min+14\r\n\r\n            if (perc >= min && perc <= max) {\r\n              success = true\r\n            } else {\r\n              success = false\r\n            }\r\n\r\n            sendNUI(\"completed\", {success}, () => {})\r\n          } else {\r\n            success = false\r\n            sendNUI(\"completed\", {success}, () => {})\r\n          }\r\n        }\r\n    }))\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\" style={{display: canShow ? 'block' : 'none'}}>\r\n        <Circle \r\n          circleP={percentage}\r\n          circleT={target}\r\n          progressColor={color}\r\n          actionKey={key}\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}